{{#package}}
package {{package}};

{{/package}}
{{#imports}}
{{#java}}
import {{.}};
{{#-last}}

{{/-last}}
{{/java}}
{{#nexus}}
import {{.}};
{{#-last}}

{{/-last}}
{{/nexus}}
{{#other}}
import {{.}};
{{#-last}}

{{/-last}}
{{/other}}
{{/imports}}
/**
 * Creates {@link {{serviceName}}} marshaller instances.
 */
public class Factory_{{serviceName}} implements DService.Factory<{{serviceName}}>
{
    @Override
    public DService<{{serviceName}}> createService (NexusObject owner)
    {
        return new Marshaller(owner);
    }

    public static DService.Factory<{{serviceName}}> createDispatcher (final {{serviceName}} service)
    {
        return new DService.Factory<{{serviceName}}>() {
            public DService<{{serviceName}}> createService (NexusObject owner) {
                return new DService.Dispatcher<{{serviceName}}>(owner) {
                    @Override public {{serviceName}} get () {
                        return service;
                    }

                    @Override public Class<{{serviceName}}> getServiceClass () {
                        return {{serviceName}}.class;
                    }

                    @Override public void dispatchCall (short methodId, Object[] args) {
                        switch (methodId) {
{{#methods}}
                        case {{-index}}:
                            service.{{name}}({{#args}}{{^-first}},{{/-first}}
                                this.<{{boxedType}}>cast(args[{{index}}]){{/args}});
                            break;
{{/methods}}
                        default:
                            super.dispatchCall(methodId, args);
                        }
                    }
                };
            }
        };
    }

    protected static class Marshaller extends DService<{{serviceName}}> implements {{serviceName}}
    {
        public Marshaller (NexusObject owner) {
            super(owner);
        }
        @Override public {{serviceName}} get () {
            return this;
        }
        @Override public Class<{{serviceName}}> getServiceClass () {
            return {{serviceName}}.class;
        }
{{#methods}}
        @Override public void {{name}} ({{#args}}{{type}} {{name}}{{^-last}}, {{/-last}}{{/args}}) {
            postCall((short){{-index}}{{#args}}, {{name}}{{/args}});
        }
{{/methods}}
    }
}
